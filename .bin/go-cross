#!/bin/bash

# go-cross [version]
#
# go-cross builds the main package under the current directory for all the first
# class Go ports. The optional parameters configure which Go command to build
# with, and a version override.
#
# This script is meant to meet my needs. If you need more, copy and adapt it.

# Consistently turn cgo off, even for our local GOOS/GOARCH.
export CGO_ENABLED=0

# Since we use GOAMD64=v3 locally,
# turn that off for cross-builds for greater compatibility.
export GOAMD64=v1

# We use a temporary directory to place build artifacts into
# while we are building, to prevent the local build stamping
# from marking any the builds as "dirty" due to untracked files.
tmp=$(mktemp -d)

version=${1:-"$(git describe --always --dirty --tags)"}
name=$(basename "$PWD")

goversion="$(go version)"
echo "Building version ${version} with ${goversion}"

while read goos goarch; do
	(
		export GOOS=$goos GOARCH=$goarch # note that GOOS affects GOEXE
		out="${name}_${version}_${goos}_${goarch}$(go env GOEXE)"
		go build -trimpath -ldflags="-w -s" -o="${tmp}/${out}"
		echo $out
	)
done < <(
	# "dist list -json" gives us a list of all targets in JSON format.
	# Flatten the list, and only keep the first-class ports.
	# Then print the GOOS/GOARCH pairs in a way that shell can easily read.
	go tool dist list -json | jq -r '.[] | select(.FirstClass) | [.GOOS, .GOARCH] | @tsv'
)

mv "${tmp}/"* .
rmdir "${tmp}"

# Text to be added at the end of the GitHub release, near the binaries.
echo
printf 'Binaries built on `%s` with:\n\n\tCGO_ENABLED=0 go build -trimpath -ldflags="-w -s"\n' "$goversion"
echo

# Sanity check that the version information is present.
bin="${name}_${version}_$(go env GOOS)_$(go env GOARCH)$(go env GOEXE)"
printf "> %s --version\n%s\n" "$name" "$(./$bin --version 2>/dev/null)"
printf "> %s version\n%s\n" "$name" "$(./$bin version 2>/dev/null)"
